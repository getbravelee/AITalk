import { useState, useEffect } from 'react';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin from '@fullcalendar/interaction';
import { EventInput } from '@fullcalendar/core';
import axiosInstance from '../../utils/axiosInstance';
import DayScheduleComponent from '../../components/main/schedule/DayScheduleComponent';
import './SchedulePage.css';

const SchedulePage = () => {
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [dayEvents, setDayEvents] = useState<{ id: string; title: string; startTime: string; endTime: string }[]>([]);
  const [events, setEvents] = useState<EventInput[]>([]);
  const [currentDate, setCurrentDate] = useState(new Date()); 

  const fetchEvents = async (year: number, month: number) => {
    console.log("üì° GET ÏöîÏ≤≠ Î≥¥ÎÉÑ: /schedule/list/" + year + "/" + month);

    try {
      const response = await axiosInstance.get(`/schedule/list/${year}/${month}`);
      console.log("üì• API ÏùëÎãµ:", response.data);

      if (!response.data || !Array.isArray(response.data)) {
        throw new Error("Invalid response format");
      }

      const formattedEvents: EventInput[] = response.data.map((item: any) => ({
        id: item.treatmentId,
        title: `${item.childName} ÏπòÎ£å`,
        start: `${item.treatmentDate}T${item.startTime}`,
        end: `${item.treatmentDate}T${item.endTime}`,
      }));

      console.log("üìÖ Ï∫òÎ¶∞ÎçîÏóê Ï†ÅÏö©Ìï† Îç∞Ïù¥ÌÑ∞:", formattedEvents);
      setEvents(formattedEvents);
    } catch (error) {
      console.error("‚ùå API Ìò∏Ï∂ú Ïã§Ìå®:", error);
    }
  };

  // üìå Ï∫òÎ¶∞ÎçîÏùò ÏõîÏù¥ Î≥ÄÍ≤ΩÎê† Îïå Ïã§ÌñâÎêòÎäî Ìï®Ïàò
  const handleDateChange = (arg: any) => {
    const newDate = new Date(arg.view.currentStart); // ‚úÖ Î≥ÄÍ≤ΩÎêú Îã¨Ïùò Ï≤´ ÎÇ†
    setCurrentDate(newDate); // ‚úÖ ÌòÑÏû¨ Î≥¥Í≥† ÏûàÎäî ÎÇ†Ïßú ÏóÖÎç∞Ïù¥Ìä∏
  };

  // üìå ÌòÑÏû¨ Î≥¥Í≥† ÏûàÎäî Ïó∞/ÏõîÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ API Ìò∏Ï∂ú
  useEffect(() => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    fetchEvents(year, month);
  }, [currentDate]);

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    }).format(date).replace(/. /g, '-').replace('.', '');
  };


  const handleDayClick = async (arg: any) => {
    const clickedDate = new Date(arg.date);
    setSelectedDate(clickedDate);
    setIsModalOpen(true);
    setDayEvents([]);
  


    // ‚úÖ YYYY-MM-DD ÌòïÏãù Î≥ÄÌôò (UTC ÏòÅÌñ• ÏóÜÏùå)
    const formattedDate = formatDate(clickedDate);
    console.log("üì° ÎÇ†ÏßúÎ≥Ñ GET ÏöîÏ≤≠ Î≥¥ÎÉÑ:", `/schedule/list/${formattedDate}`);
  
    try {
      const response = await axiosInstance.get(`/schedule/list/${formattedDate}`);
      console.log("üì• Í∞úÎ≥Ñ ÎÇ†Ïßú API ÏùëÎãµ:", response.data);
  
      if (!response.data || !Array.isArray(response.data)) {
        throw new Error("Invalid response format");
      }
  
      const sortedEvents = response.data
        .map((item: any) => ({
          id: item.treatmentId,
          title: `${item.childName} ÏπòÎ£å`,
          startTime: item.startTime,
          endTime: item.endTime,
        }))
        .sort((a: any, b: any) => a.startTime.localeCompare(b.startTime));
  
      setDayEvents(sortedEvents);
    } catch (error) {
      console.error("‚ùå Í∞úÎ≥Ñ ÎÇ†Ïßú API Ìò∏Ï∂ú Ïã§Ìå®:", error);
    }
  };
  

  return (
    <div className="calendar-container">
      <FullCalendar
        plugins={[dayGridPlugin, interactionPlugin]}
        initialView="dayGridMonth"
        events={events}
        dateClick={handleDayClick} 
        datesSet={handleDateChange} // ‚úÖ Îã¨Ïù¥ Î≥ÄÍ≤ΩÎê† Îïå Ïã§ÌñâÎê®
        dayMaxEvents={3}
        fixedWeekCount={false}
        height="auto"
      />

      {isModalOpen && selectedDate && (
        <DayScheduleComponent
          date={selectedDate}
          events={dayEvents}
          onClose={() => setIsModalOpen(false)}
        />
      )}
    </div>
  );
};

export default SchedulePage;
