pipeline {
    agent any

    environment {
        IMAGE_NAME = "suhwany/aitalk"  // ‚úÖ ÌïòÎÇòÏùò Docker Hub Î†àÌè¨ÏßÄÌÜ†Î¶¨
        IMAGE_TAG_BACKEND = "backend-latest"  // Î∞±ÏóîÎìú ÌÉúÍ∑∏
        IMAGE_TAG_FRONTEND = "frontend-latest"  // ÌîÑÎ°†Ìä∏ÏóîÎìú ÌÉúÍ∑∏

        MATTERMOST_WEBHOOK = "https://meeting.ssafy.com/hooks/9p1665jgnjdn3msh9piyg1zpme"  // ‚úÖ Mattermost ÏõπÌõÖ URL
    }

    stages {
        stage('Notify GitLab') {
            steps {
                echo 'Notify GitLab'
                updateGitlabCommitStatus name: 'build', state: 'pending'
            }
        }

        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlabId', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
                        git branch: 'develop', url: "https://${GIT_USERNAME}:${GIT_TOKEN}@lab.ssafy.com/s12-webmobile3-sub1/S12P11E102.git"
                    }
                }
            }
        }

        stage('Build Backend') {
            steps {
                sh '''
                cd Be/AITalk
                chmod +x ./gradlew
                ./gradlew clean build -x test
                '''
            }
        }

        stage('Docker Build & Push Backend') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DockerId', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        cd Be/AITalk
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG_BACKEND} .
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG_BACKEND}
                        '''
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                sh '''
                cd Fe/admin-project
                npm install
                npm run build
                '''
            }
        }

        stage('Docker Build & Push Frontend') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DockerId', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        cd Fe/admin-project
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG_FRONTEND} .
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG_FRONTEND}
                        '''
                    }
                }
            }
        }

        stage('Deploy to EC2 (Backend)') {
            steps {
                sh '''
                chmod +x jenkins/scripts/deploy_backend.sh
                ./jenkins/scripts/deploy_backend.sh
                '''
            }
        }

        stage('Deploy to EC2 (Frontend)') {
            steps {
                sh '''
                chmod +x jenkins/scripts/deploy_frontend.sh
                ./jenkins/scripts/deploy_frontend.sh
                '''
            }
        }
    }

    post {
        success {
            script {
                sh '''
                curl -X POST -H 'Content-Type: application/json' --data '{
                    "text": "‚úÖ Jenkins Build & Deployment Success! üéâ"
                }' ${MATTERMOST_WEBHOOK}
                '''
            }
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
        failure {
            script {
                sh '''
                curl -X POST -H 'Content-Type: application/json' --data '{
                    "text": "‚ùå Jenkins Build Failed! üî•"
                }' ${MATTERMOST_WEBHOOK}
                '''
            }
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
    }
}
